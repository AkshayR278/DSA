#include <stdio.h>
#include <string.h>

void createList(char students[50][50], int *count) {
    int n;
    printf("How many students do you want to add? ");
    scanf("%d", &n);
    if (n > 50) {
        printf("Cannot add more than %d students!\n", 50);
        return;
    }
    *count = n;
    for (int i = 0; i < n; i++) {
        printf("Enter name of student %d: ", i + 1);
        scanf("%s", students[i]);
    }
}

void insertStudent(char students[50][50], int *count) {
    if (*count >=50) {
        printf("Cannot add more students. List is full.\n");
        return;
    }
    char name[50];
    int pos;
    printf("Enter the name of the new student: ");
    scanf("%s", name);
    printf("Enter the position to insert (1 to %d): ", *count + 1);
    scanf("%d", &pos);
    if (pos < 1 || pos > *count + 1) {
        printf("Invalid position!\n");
        return;
    }
    for (int i = *count; i >= pos; i--) {
        strcpy(students[i], students[i - 1]);
    }
    strcpy(students[pos - 1], name);
    (*count)++;
    traverseList(students, *count);
}

void deleteStudent(char students[50][50], int *count) {
    if (*count == 0) {
        printf("The list is empty. Nothing to delete.\n");
        return;
    }
    int choice;
    printf("Delete by: 1. Name 2. Position (1 to %d)? ", *count);
    scanf("%d", &choice);

    if (choice == 1) {
        char name[50];
        printf("Enter the name of the student to delete: ");
        scanf("%s", name);
        int found = 0;
        for (int i = 0; i < *count; i++) {
            if (strcmp(students[i], name) == 0) {
                found = 1;
                for (int j = i; j < *count - 1; j++) {
                    strcpy(students[j], students[j + 1]);
                }
                (*count)--;
                break;
            }
        }
        if (!found) {
            printf("Student not found.\n");
        }
    } else if (choice == 2) {
        int pos;
        printf("Enter the position to delete: ");
        scanf("%d", &pos);
        if (pos < 1 || pos > *count) {
            printf("Invalid position!\n");
            return;
        }
        for (int i = pos - 1; i < *count - 1; i++) {
            strcpy(students[i], students[i + 1]);
        }
        (*count)--;
    } else {
        printf("Invalid choice!\n");
    }
    traverseList(students, *count);
}

void traverseList(char students[50][50], int count) {
    if (count == 0) {
        printf("The list is empty.\n");
        return;
    }
    printf("Current list of students:\n");
    for (int i = 0; i < count; i++) {
        printf("%d. %s\n", i + 1, students[i]);
    }
}

void searchStudent(char students[50][50], int count) {
    char name[50];
    printf("Enter the name of the student to search for: ");
    scanf("%s", name);
    int found = 0;
    for (int i = 0; i < count; i++) {
        if (strcmp(students[i], name) == 0) {
            printf("Student %s found at position %d.\n", name, i + 1);
            found = 1;
            break;
        }
    }
    if (!found) {
        printf("Student not found.\n");
    }
}

int main() {
    char students[50][50];
    int count = 0;
    int choice;

    do {
        printf("\nStudent Management System:\n");
        printf("1. Create the list\n");
        printf("2. Insert a new student\n");
        printf("3. Delete a student\n");
        printf("4. Traverse the list\n");
        printf("5. Search for a student\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                createList(students, &count);
                break;
            case 2:
                insertStudent(students, &count);
                break;
            case 3:
                deleteStudent(students, &count);
                break;
            case 4:
                traverseList(students, count);
                break;
            case 5:
                searchStudent(students, count);
                break;
            case 6:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while(choice != 6);

    return 0;
}
